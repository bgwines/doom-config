(undo-tree-save-format-version . 1)
"93afdb7a4e1c00237b62c93ca07f5257d9ad8dbd"
[nil nil nil nil (25939 64551 824743 0) 0 nil]
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 11211) (t 25939 60326 898459 852000)) nil (25939 64556 128066 0) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . -11209) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -11210) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 11211 (t 25939 60326 898459 852000)) ((11210 . 11211) (nil ws-butler-chg delete 11210 . 11211) (11209 . 11210)) (25939 64551 824460 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -11210) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 11211) nil (25939 64556 128065 0) 0 nil])
nil
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -11262) (undo-tree-id34 . -1) (undo-tree-id35 . 1) (undo-tree-id36 . -1) 11263) nil (25942 23760 157287 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11322 . 11323) (nil fontified nil 11303 . 11323) (nil fontified nil 11268 . 11303) (nil fontified nil 11263 . 11268) (11263 . 11323) (t 25939 64556 133739 717000)) nil (25942 23831 197934 0) 0 nil] [nil nil ((12825 . 12826) (t 25939 64556 133739 717000)) ((#("y" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . 12825) (undo-tree-id41 . -1) (undo-tree-id42 . -1)) (25942 23760 156974 0) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . 11263) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 11263) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 11263) (#(";" 0 1 (ws-butler-chg delete fontified t face font-lock-comment-delimiter-face)) . 11263) (#(";" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-delimiter-face)) . 11263)) nil (25942 23831 197932 0) 0 nil])
nil
([nil nil ((#("haskell" 0 7 (ws-butler-chg chg fontified t)) . -11275) (undo-tree-id170 . -7) (undo-tree-id171 . -7) (undo-tree-id172 . -7) (undo-tree-id173 . -7) (undo-tree-id174 . -7) (undo-tree-id175 . -7) (undo-tree-id176 . -7) (undo-tree-id177 . -7) (undo-tree-id178 . -7) 11282) nil (25942 23831 197930 0) 0 nil])
([nil nil ((11275 . 11283)) nil (25942 23831 197922 0) 0 nil])
([nil nil ((#("(kbd \"C-c C-h\") 'hs-lint))" 0 1 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-2-face)) 1 4 (ws-butler-chg chg fontified t face font-lock-function-name-face) 4 5 (ws-butler-chg chg fontified t) 5 6 (ws-butler-chg chg fontified t face font-lock-string-face) 6 14 (ws-butler-chg chg fontified t face font-lock-string-face) 14 15 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (ws-butler-chg chg fontified t) 16 17 (ws-butler-chg chg fontified t face highlight-quoted-quote) 17 24 (ws-butler-chg chg fontified t face highlight-quoted-symbol) 24 25 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face)) 25 26 (ws-butler-chg chg fontified t rear-nonsticky t face (rainbow-delimiters-unmatched-face))) . -11293) (undo-tree-id43 . -26) (undo-tree-id44 . -26) (undo-tree-id45 . -26) (undo-tree-id46 . -26) (undo-tree-id47 . -26) (undo-tree-id48 . -26) (undo-tree-id49 . -26) (undo-tree-id50 . -26) (undo-tree-id51 . -26) (undo-tree-id52 . -26) (undo-tree-id53 . -26) (undo-tree-id54 . -26) (undo-tree-id55 . -26) (undo-tree-id56 . -26) (undo-tree-id57 . -26) (undo-tree-id58 . -26) (undo-tree-id59 . -26) (undo-tree-id60 . -26) (undo-tree-id61 . -26) (undo-tree-id62 . -26) (undo-tree-id63 . -26) (undo-tree-id64 . -26) (undo-tree-id65 . -26) (undo-tree-id66 . -26) (undo-tree-id67 . -22) (undo-tree-id68 . -22) (undo-tree-id69 . -22) (undo-tree-id70 . -22) (undo-tree-id71 . -22) (undo-tree-id72 . -22) (undo-tree-id73 . -22) (undo-tree-id74 . -22) (undo-tree-id75 . -22) (undo-tree-id76 . -22) (undo-tree-id77 . -22) (undo-tree-id78 . -22) (undo-tree-id79 . -22) (undo-tree-id80 . -22) (undo-tree-id81 . -22) (undo-tree-id82 . -20) (undo-tree-id83 . -22) (undo-tree-id84 . -20) (undo-tree-id85 . -20) (undo-tree-id86 . -20) (undo-tree-id87 . -20) (undo-tree-id88 . -20) (undo-tree-id89 . -20) (undo-tree-id90 . -20) (undo-tree-id91 . -17) (undo-tree-id92 . -20) (undo-tree-id93 . -17) (undo-tree-id94 . -17) (undo-tree-id95 . -17) (undo-tree-id96 . -17) (undo-tree-id97 . -17) (undo-tree-id98 . -17) (undo-tree-id99 . -17) (undo-tree-id100 . -12) (undo-tree-id101 . -17) (undo-tree-id102 . -12) (undo-tree-id103 . -12) (undo-tree-id104 . -12) (undo-tree-id105 . -12) (undo-tree-id106 . -12) (undo-tree-id107 . -12) (undo-tree-id108 . -12) (undo-tree-id109 . -10) (undo-tree-id110 . -12) (undo-tree-id111 . -10) (undo-tree-id112 . -10) (undo-tree-id113 . -10) (undo-tree-id114 . -10) (undo-tree-id115 . -10) (undo-tree-id116 . -10) (undo-tree-id117 . -10) (undo-tree-id118 . -8) (undo-tree-id119 . -10) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -8) (undo-tree-id125 . -8) (undo-tree-id126 . -8) (undo-tree-id127 . -6) (undo-tree-id128 . -8) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) (undo-tree-id135 . -6) (undo-tree-id136 . -1) (undo-tree-id137 . -6) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . 1) (undo-tree-id146 . -26) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -26) (undo-tree-id156 . -26) (undo-tree-id157 . -26) (undo-tree-id158 . -26) (undo-tree-id159 . -26) (undo-tree-id160 . -26) (undo-tree-id161 . -26) (undo-tree-id162 . -26) (undo-tree-id163 . -26) (undo-tree-id164 . -26) (undo-tree-id165 . -26) (undo-tree-id166 . -26) (undo-tree-id167 . -26) (undo-tree-id168 . -26) (undo-tree-id169 . -26)) nil (25942 23831 197917 0) 0 nil])
([nil current ((nil rear-nonsticky nil 11328 . 11329) (nil fontified nil 11328 . 11329) (nil fontified nil 11308 . 11328) (nil fontified nil 11307 . 11308) (nil fontified nil 11306 . 11307) (nil fontified nil 11305 . 11306) (nil fontified nil 11298 . 11305) (nil fontified nil 11297 . 11298) (nil fontified nil 11294 . 11297) (nil fontified nil 11293 . 11294) (11293 . 11329)) nil (25942 23831 197802 0) 0 nil])
nil
